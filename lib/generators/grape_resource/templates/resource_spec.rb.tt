require "rails_helper"

RSpec.describe <%= version.camelize %>::Resources::<%= class_name.pluralize %>, type: :request do
  let!(:<%= file_name.pluralize %>) { create_list(:<%= file_name %>, 3) }
  let(:<%= file_name %>) { <%= file_name.pluralize %>.first }
  let(:<%= file_name %>_id) { <%= file_name %>.id }
  let(:user) { create(:user) }
  let(:headers) { authenticate_request(user) }

  describe "GET /api/<%= version %>/<%= file_name.pluralize %>" do
    before { get "/api/<%= version %>/<%= file_name.pluralize %>", headers: headers }

    it "returns a list of <%= file_name.pluralize %>" do
      expect(response).to have_http_status(:ok)
      expect(response_body[:<%= file_name.pluralize %>].size).to eq(3)
    end

    it "includes pagination metadata" do
      expect(response_body[:pagy]).to include(
        count: kind_of(Integer),
        page: kind_of(Integer),
        limit: kind_of(Integer),
        pages: kind_of(Integer),
        prev_url: anything,
        next_url: anything
      )
    end
  end

  describe "GET /api/<%= version %>/<%= file_name.pluralize %>/:id" do
    context "when the record exists" do
      before { get "/api/<%= version %>/<%= file_name.pluralize %>/#{<%= file_name %>_id}", headers: headers }

      it "returns the <%= file_name.singularize %>" do
        expect(response).to have_http_status(:ok)
        expect(response_body[:<%= file_name.singularize %>][:id]).to eq(<%= file_name %>_id)
        <%- attributes.each do |attribute| -%>
        expect(response_body[:<%= file_name.singularize %>][:<%= attribute.name %>]).to eq(<%= file_name %>.<%= attribute.name %>)
        <%- end -%>
      end
    end

    context "when the record does not exist" do
      before { get "/api/<%= version %>/<%= file_name.pluralize %>/0", headers: headers }

      it "returns a not found error message" do
        expect(response).to have_http_status(:not_found)
        expect(response_body[:errors][:status]).to eq("Not Found")
      end
    end
  end

  describe "POST /api/<%= version %>/<%= file_name.pluralize %>" do
    let(:valid_attributes) do
      {
        <%- attributes.each do |attribute| -%>
        <%= attribute.name %>: <%= default_value_for(attribute, :create) %>,
        <%- end -%>
      }
    end

    context "when the request is valid" do
      it "creates a new <%= file_name.singularize %>" do
        expect {
          post "/api/<%= version %>/<%= file_name.pluralize %>", params: valid_attributes, headers: headers
        }.to change(<%= class_name %>, :count).by(1)

        expect(response).to have_http_status(:created)
      end
    end

    context "when the request is invalid" do
      it "does not create a new <%= file_name.singularize %> and returns a validation failure message" do
        expect {
          post "/api/<%= version %>/<%= file_name.pluralize %>", params: { <%= attributes.first.name %>: nil }, headers: headers
        }.not_to change(<%= class_name %>, :count)

        expect(response).to have_http_status(:bad_request)
        expect(response_body[:errors][:status]).to eq("Bad Request")
      end
    end
  end

  describe "PUT /api/<%= version %>/<%= file_name.pluralize %>/:id" do
    let(:valid_attributes) do
      {
        <%- attributes.each do |attribute| -%>
        <%= attribute.name %>: <%= default_value_for(attribute, :update) %>,
        <%- end -%>
      }
    end

    context "when the record exists" do
      it "updates the record" do
        put "/api/<%= version %>/<%= file_name.pluralize %>/#{<%= file_name %>_id}", params: valid_attributes, headers: headers

        expect(response).to have_http_status(:ok)
        <%- attributes.each do |attribute| -%>
        expect(<%= file_name %>.reload.<%= attribute.name %>).to eq(valid_attributes[:<%= attribute.name %>])
        <%- end -%>
      end
    end

    context "when the record does not exist" do
      it "returns a not found error message" do
        put "/api/<%= version %>/<%= file_name.pluralize %>/0", params: valid_attributes, headers: headers

        expect(response).to have_http_status(:not_found)
        expect(response_body[:errors][:status]).to eq("Not Found")
      end
    end
  end

  describe "DELETE /api/<%= version %>/<%= file_name.pluralize %>/:id" do
    context "when the record exists" do
      it "deletes the <%= file_name.singularize %>" do
        expect {
          delete "/api/<%= version %>/<%= file_name.pluralize %>/#{<%= file_name %>_id}", headers: headers
        }.to change(<%= class_name %>, :count).by(-1)

        expect(response).to have_http_status(:no_content)
      end
    end

    context "when the record does not exist" do
      it "returns a not found error message" do
        delete "/api/<%= version %>/<%= file_name.pluralize %>/0", headers: headers

        expect(response).to have_http_status(:not_found)
        expect(response_body[:errors][:status]).to eq("Not Found")
      end
    end
  end
end
